"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _service = require("spinal-env-viewer-room-manager/js/service");

var _visitModel = require("./models/visit.model.js");

var _visitModel2 = _interopRequireDefault(_visitModel);

var _spinalCoreConnectorjs_type = require("spinal-core-connectorjs_type");

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import OperationModel from "./operationModel";
// import VisitModel from "./visitModel";

class SpinalVisitService {
  constructor() {
    this.VISIT_CONTEXT_NAME = ".visit_context";
    this.CONTEXT_TYPE = "visit_context";

    this.VISIT_TYPE = "visit";

    this.MAINTENANCE_VISIT = "MAINTENANCE_VISIT";
    this.REGULATORY_VISIT = "REGULATORY_VISIT";
    this.SECURITY_VISIT = "SECURITY_VISIT";
    this.DIAGNOSTIC_VISIT = "DIAGNOSTIC_VISIT";

    this.VISITS = Object.freeze([{
      type: this.MAINTENANCE_VISIT,
      name: "Maintenace visit"
    }, {
      type: this.REGULATORY_VISIT,
      name: "Regulatory visit"
    }, {
      type: this.SECURITY_VISIT,
      name: "Security Visit"
    }, {
      type: this.DIAGNOSTIC_VISIT,
      name: "Diagnostic visit"
    }]);

    //RELATIONS
    // this.CONTEXT_TO_VISIT_RELATION = "hasVisit";
    this.GROUP_TO_TASK = "hasTask";

    this.VISIT_TO_GROUP_RELATION = "visitHasGroup";
    this.GROUP_TO_EVENT_RELATION = "hasEventState";
    // this.TASK_TO_STATE = "hasState";

    // this._init();
  }

  _init() {
    _spinalEnvViewerGraphService.SpinalGraphService.waitForInitialization().then(() => {
      let context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(this.VISIT_CONTEXT_NAME);

      if (typeof context !== "undefined") return;

      _spinalEnvViewerGraphService.SpinalGraphService.addContext(this.VISIT_CONTEXT_NAME, this.CONTEXT_TYPE, new _spinalCoreConnectorjs_type.Model({
        name: this.VISIT_CONTEXT_NAME
      })).then(contextCreated => {
        let contextId = contextCreated.getId().get();

        this.VISITS.forEach(el => {
          let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
            name: el.name,
            type: el.type
          }, new _spinalCoreConnectorjs_type.Model({
            name: el
          }));

          _spinalEnvViewerGraphService.SpinalGraphService.addChildInContext(contextId, nodeId, contextId, this.CONTEXT_TO_VISIT_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE);
        });
      });
    });
  }

  getAllVisits() {
    return this.VISITS;
  }

  addTaskOnGroup(groupId, taskName, periodicityNumber, periodicityMesure, visitName, interventionNumber, interventionMesure, description) {

    // let visitName = SpinalGraphService.getInfo(visitId).type.get();

    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(groupId, [this.GROUP_TO_TASK]).then(children => {

      let argNodeId;
      if (children.length === 0) {
        argNodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: "maintenance"
        });

        _spinalEnvViewerGraphService.SpinalGraphService.addChild(groupId, argNodeId, this.GROUP_TO_TASK, _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE);
      }

      let node = typeof argNodeId !== "undefined" ? _spinalEnvViewerGraphService.SpinalGraphService.getInfo(argNodeId) : children[0];

      return this.getPtrValue(node, visitName).then(lst => {

        // let nodeId = this._prepareNode(groupId, taskName,
        //   periodicityNumber,
        //   periodicityMesure,
        //   visitId,
        //   visitName,
        //   interventionNumber,
        //   interventionMesure,
        //   description);

        // SpinalGraphService.addChild(visitId, nodeId, this
        //   .VISIT_TO_TASK_RELATION, SPINAL_RELATION_PTR_LST_TYPE);


        let task = new _visitModel2.default(taskName, periodicityNumber, periodicityMesure, visitName, interventionNumber, interventionMesure, description);

        let nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          groupId: groupId,
          name: taskName,
          periodicity: {
            number: task.periodicity.number.get(),
            mesure: task.periodicity.mesure.get()
          },
          intervention: {
            number: task.intervention.number.get(),
            mesure: task.intervention.mesure.get()
          },
          visitType: visitName,
          description: description

        }, task);

        let realNode = _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(nodeId);

        lst.push(realNode);

        return realNode.info;
      });
    });

    // let task = new VisitModel(taskName, beginDate, periodicityNumber,
    //   periodicityMesure,
    //   visitId, visitName);

    // let nodeId = SpinalGraphService.createNode({
    //   name: taskName,
    //   type: "task",
    //   visitId: visitId
    // }, task);

    // // return SpinalGraphService.addChild(groupId, nodeId, this.GROUP_TO_TASK,
    // //   SPINAL_RELATION_PTR_LST_TYPE).then(el => {
    // //   if (el) {
    // //     this.addOperations(groupId, nodeId, beginDate);
    // //     return task;
    // //   }
    // // })
  }

  getPtrValue(node, ptrName) {
    let realNode = _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(node.id.get());

    return new Promise(resolve => {
      if (!realNode.info[ptrName]) {
        realNode.info.add_attr(ptrName, {
          tasks: new _spinalCoreConnectorjs_type.Ptr(new _spinalCoreConnectorjs_type.Lst())
        });
      }

      realNode.info[ptrName].tasks.load(value => {
        return resolve(value);
      });
    });
  }

  getGroupTasks(groupId, visityType) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(groupId, [this.GROUP_TO_TASK]).then(res => {
      let nodeId;
      if (res.length === 0) {
        nodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: "maintenance"
        });

        _spinalEnvViewerGraphService.SpinalGraphService.addChild(groupId, nodeId, this.GROUP_TO_TASK, _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE);
      }

      let node = typeof nodeId !== "undefined" ? _spinalEnvViewerGraphService.SpinalGraphService.getInfo(nodeId) : res[0];

      return this.getPtrValue(node, visityType);
    });
  }

  generateEvent(visitType, groupId, eventsData) {

    // console.log("inside js", visitType, groupId, taskName, beginDate, endDate,
    //   periodicityNumber, periodicityMesure);


    return this.createVisitContext(visitType).then(el => {
      console.log("el", el);
      return this.linkGroupToVistContext(el.id.get(), groupId).then(res => {
        console.log("res", res);
        if (res) {
          this.addEvent(groupId, "déclaré");
          this.addEvent(groupId, "Encours");
          this.addEvent(groupId, "Effectué");
          this.addEvent(groupId, "déclaré");
          this.addEvent(groupId, "Encours");
          this.addEvent(groupId, "Effectué");
          this.addEvent(groupId, "déclaré");
          this.addEvent(groupId, "Encours");
          this.addEvent(groupId, "Effectué");
          this.addEvent(groupId, "déclaré");
          this.addEvent(groupId, "Encours");
          this.addEvent(groupId, "Effectué");
        }
      });
    }).catch(err => {
      console.log(err);
      return Promise.resolve(err);
    });
  }

  addEvent(groupId, state, name, date) {
    return this.getEventStateNode(groupId, state).then(eventStateNode => {
      console.log("eventStateNode", eventStateNode);
    });
  }

  createVisitContext(visitType) {

    let visit = this.VISITS.find(el => {
      return el.type === visitType;
    });

    if (typeof visit !== "undefined") {
      const contextName = `.${visit.name}`;

      let context = _spinalEnvViewerGraphService.SpinalGraphService.getContext(contextName);
      if (typeof context !== "undefined") return Promise.resolve(context.info);

      return _spinalEnvViewerGraphService.SpinalGraphService.addContext(contextName, visitType, new _spinalCoreConnectorjs_type.Model({
        name: this.VISIT_CONTEXT_NAME
      })).then(contextCreated => {
        return contextCreated.info;
      });
    } else {
      return Promise.reject("visitNotFound");
    }
  }

  linkGroupToVistContext(visitContextId, groupId) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(visitContextId, [this.VISIT_TO_GROUP_RELATION]).then(children => {
      console.log("children", children);

      for (let i = 0; i < children.length; i++) {
        const child = children[i].id.get();
        if (child === groupId) return true;
      }
    }).then(el => {

      console.log("el2222", el);

      if (typeof el === "undefined") {
        console.log("yes el222 is undefined", visitContextId, groupId);
        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(visitContextId, groupId, this.VISIT_TO_GROUP_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE);
      } else {
        console.log("node not undefined");

        return el;
      }
    });
  }

  getEventStateNode(groupId, eventSate) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(groupId, [this.GROUP_TO_EVENT_RELATION]).then(children => {

      for (let i = 0; i < children.length; i++) {
        const name = children[i].name.get();

        if (name === eventSate) {
          return children[i];
        }
      }
    }).then(el => {
      if (typeof el === "undefined") {
        let argNodeId = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: eventSate,
          state: eventSate,
          type: "EventState"
        });

        return _spinalEnvViewerGraphService.SpinalGraphService.addChild(groupId, argNodeId, this.GROUP_TO_EVENT_RELATION, _spinalEnvViewerGraphService.SPINAL_RELATION_PTR_LST_TYPE).then(res => {
          if (res) return _spinalEnvViewerGraphService.SpinalGraphService.getInfo(argNodeId);
        });
      } else {
        return el;
      }
    });
  }

}

let spinalVisitService = new SpinalVisitService();

exports.default = spinalVisitService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,